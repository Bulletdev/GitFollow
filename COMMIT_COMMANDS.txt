# COMANDOS DE COMMIT - COPIAR E COLAR UM POR VEZ

# Inicializar (se ainda não fez)
git init
git branch -M main

# ============================================
# 1. CONFIGURAÇÃO INICIAL
# ============================================
git add .gitignore .ruby-version .rspec
git commit -m "chore: initial project setup

- Add .gitignore for Ruby project
- Configure Ruby version 3.0+
- Setup RSpec configuration"

# ============================================
# 2. GEMSPEC E DEPENDÊNCIAS
# ============================================
git add Gemfile gitfollow.gemspec Rakefile lib/gitfollow/version.rb
git commit -m "chore: configure gem specification and dependencies

- Add gitfollow.gemspec with metadata
- Configure Gemfile with runtime and dev dependencies
- Add Rakefile for common tasks
- Define initial version 0.1.0"

# ============================================
# 3. CLIENT (API GITHUB)
# ============================================
git add lib/gitfollow/client.rb
git commit -m "feat(client): implement GitHub API client

- Create Client class with Octokit integration
- Add methods for fetching followers and following
- Implement rate limit checking
- Add issue creation support
- Handle GitHub API errors gracefully"

# ============================================
# 4. STORAGE (PERSISTÊNCIA)
# ============================================
git add lib/gitfollow/storage.rb
git commit -m "feat(storage): implement local data persistence

- Create Storage class for JSON-based persistence
- Save snapshots of followers/following with timestamps
- Track history of follower changes
- Support data export to JSON and CSV formats
- Add mutual followers calculation"

# ============================================
# 5. TRACKER (LÓGICA DE RASTREAMENTO)
# ============================================
git add lib/gitfollow/tracker.rb
git commit -m "feat(tracker): implement follower tracking logic

- Create Tracker class for change detection
- Detect new followers and unfollows
- Calculate statistics (ratio, mutual followers, etc)
- Generate reports in text and markdown formats
- Find non-followers (users who don't follow back)"

# ============================================
# 6. NOTIFIER (NOTIFICAÇÕES)
# ============================================
git add lib/gitfollow/notifier.rb
git commit -m "feat(notifier): implement notification system

- Create Notifier class for change notifications
- Format output for terminal with colors
- Generate formatted tables with TTY::Table
- Support GitHub Issue creation on changes
- Add summary generation for changes"

# ============================================
# 7. CLI INTERFACE
# ============================================
git add lib/gitfollow/cli.rb lib/gitfollow.rb bin/gitfollow
git commit -m "feat(cli): implement command-line interface

- Create CLI with Thor framework
- Add commands: init, check, report, stats
- Add commands: mutual, non-followers, export
- Support JSON output mode for all commands
- Add progress spinners and error handling
- Make bin/gitfollow executable"

# ============================================
# 8. TESTES - STORAGE
# ============================================
git add spec/spec_helper.rb spec/gitfollow/storage_spec.rb
git commit -m "test(storage): add comprehensive storage tests

- Configure RSpec with SimpleCov and WebMock
- Test snapshot saving and retrieval
- Test history tracking functionality
- Test data export (JSON and CSV)
- Test data clearing and existence checks
- Achieve 70%+ code coverage"

# ============================================
# 9. TESTES - CLIENT
# ============================================
git add spec/gitfollow/client_spec.rb
git commit -m "test(client): add GitHub API client tests

- Test client initialization and validation
- Test follower/following fetching
- Test rate limit checking
- Test issue creation
- Mock GitHub API responses
- Test error handling scenarios"

# ============================================
# 10. TESTES - TRACKER
# ============================================
git add spec/gitfollow/tracker_spec.rb
git commit -m "test(tracker): add tracker logic tests

- Test initial setup and snapshots
- Test change detection (new followers/unfollows)
- Test statistics calculation
- Test report generation (text/markdown)
- Test mutual followers and non-followers
- Handle both symbol and string keys"

# ============================================
# 11. TESTES - NOTIFIER
# ============================================
git add spec/gitfollow/notifier_spec.rb
git commit -m "test(notifier): add notification tests

- Test terminal output formatting
- Test table formatting with TTY::Table
- Test GitHub issue creation
- Test summary generation
- Test colorized and non-colorized output"

# ============================================
# 12. TESTES - MODULE
# ============================================
git add spec/gitfollow_spec.rb
git commit -m "test: add module and version tests

- Test GitFollow module structure
- Verify all classes are defined
- Test version constant existence"

# ============================================
# 13. GITHUB ACTIONS - CI
# ============================================
git add .github/workflows/ci.yml
git commit -m "ci: add continuous integration workflow

- Test on Ruby 3.0, 3.1, 3.2, 3.3
- Run RSpec tests with coverage
- Run RuboCop linting
- Build gem artifact
- Upload coverage to Codecov"

# ============================================
# 14. GITHUB ACTIONS - DAILY CHECK
# ============================================
git add .github/workflows/daily-check.yml
git commit -m "ci: add daily follower check workflow

- Schedule daily execution at 9 AM UTC
- Cache follower data between runs
- Create GitHub issues on changes detected
- Generate and upload markdown reports
- Support manual workflow dispatch"

# ============================================
# 15. GITHUB ACTIONS - RELEASE
# ============================================
git add .github/workflows/release.yml
git commit -m "ci: add automated release workflow

- Trigger on version tags (v*)
- Run tests before release
- Build and publish gem to RubyGems
- Create GitHub Release with changelog
- Extract version-specific changelog"

# ============================================
# 16. RUBOCOP CONFIGURATION
# ============================================
git add .rubocop.yml
git commit -m "chore: configure RuboCop for code quality

- Set Ruby 3.0 as target version
- Configure style preferences
- Set metrics limits (line length, method size)
- Configure RSpec cops
- Disable documentation requirement"

# ============================================
# 17. README
# ============================================
git add README.md
git commit -m "docs: add comprehensive README

- Add project description and features
- Include installation instructions
- Document all CLI commands with examples
- Add GitHub Actions setup guide
- Include badges for CI, coverage, version
- Add troubleshooting section
- Document security considerations"

# ============================================
# 18. CONTRIBUTING GUIDELINES
# ============================================
git add CONTRIBUTING.md
git commit -m "docs: add contributing guidelines

- Define development setup process
- Document testing requirements
- Explain code style guidelines
- Describe pull request process
- Add commit message conventions"

# ============================================
# 19. CHANGELOG
# ============================================
git add CHANGELOG.md
git commit -m "docs: add changelog

- Document version 0.1.0 features
- List all implemented functionality
- Follow Keep a Changelog format
- Add links to releases"

# ============================================
# 20. LICENSE
# ============================================
git add LICENSE
git commit -m "docs: add MIT license

- Add MIT License text
- Set copyright to Michael D. Bullet"

# ============================================
# 21. CONFIGURATION EXAMPLES
# ============================================
git add .env.example .gitfollow.yml.example
git commit -m "docs: add configuration examples

- Add .env.example with GitHub token template
- Add .gitfollow.yml.example with all options
- Document optional configuration settings"

# ============================================
# 22. COMMIT FINAL
# ============================================
git add .
git commit -m "chore: prepare for v0.1.0 release

- Update all references to bulletdev/gitfollow
- Fix gemspec warnings
- Ensure all tests pass (57/57)
- Achieve 70.56% code coverage
- Ready for production use"

# ============================================
# PUSH PARA GITHUB
# ============================================

# Adicionar remote
git remote add origin git@github.com:bulletdev/gitfollow.git

# Push dos commits
git push -u origin main

# Criar e push da tag
git tag -a v0.1.0 -m "GitFollow v0.1.0

First stable release with:
- Complete CLI for follower tracking
- GitHub Actions automation
- Comprehensive test suite
- Professional documentation"

git push origin v0.1.0

# ============================================
# VERIFICAR STATUS
# ============================================
git log --oneline
git status
